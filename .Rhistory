fs_dc <- readRDS("FunctionalStates/Functional_states_datasets_DCs.rds")
fs_nk <- readRDS("FunctionalStates/Functional_states_datasets_NKcells.rds")
fs_t <- readRDS("FunctionalStates/Functional_states_datasets_Tcells.rds")
fs_b <- readRDS("FunctionalStates/Functional_states_datasets_Bcells.rds")
fs_mono <- readRDS("FunctionalStates/Functional_states_datasets_Monocytes.rds")
getEnrichedBPManual <-function(dataset,setGenes,gda,adjMethod="bonferroni"){
dataset <- dataset[which(!str_detect(rownames(dataset),"^ERCC")),]
dataset <- dataset[which(!str_detect(rownames(dataset),"^mt")),]
dataset <- as.matrix(dataset)
deg <- setGenes
MB2gene=gda[, c("GOID", "Gene")]
MB2name=gda[, c("GOID", "GOterm")]
res <- enricher(deg, TERM2GENE=MB2gene, TERM2NAME=MB2name,pvalueCutoff = 0.05, pAdjustMethod = adjMethod, minGSSize = 5, maxGSSize = 2000,universe = rownames(dataset))
return(res)
}
process_fsObj <- function(fs){
modID <- 1
dft <- data.frame("Cell"=NA,"Module"=NA,"TFs"=NA,"Genes"=NA)
for (i in seq(1,length(fs))) {
#For each dataset
d <- fs[[i]]
if(length(unique(d$clust)) == 1){
#no splitting
}else{
#Get the results from FunPart algo
for (uc in seq(1,length(unique(d$clust)))) {
cn <- unique(d$clust)[uc] #Specific clust
clu <- strsplit(cn,"_")[[1]] #Get last level to know if M1 or M2
if(length(clu)>1){
lev <- paste(clu[-length(clu)],collapse = "_")
lev <- paste(lev,"1|0",sep="_")
}else{
lev <- "1|0"
}
lastel <- clu[length(clu)]
if(lastel == "1"){
#Module will be M1
module <- "M1"
cli <- "C1"
}else{
#Module will be M2
module <- "M2"
cli <- "C2"
}
#Select the right branch/module for the results
dft <- rbind(dft,data.frame(
"Cell"=names(d$clust[which(d$clust == cn)]),
"Module"=rep(paste("M",modID,sep=""),length(names(d$clust[which(d$clust == cn)]))),
"TFs"=paste(names(d$cliques$Clust1[[lev]][[cli]]),collapse = ","),
"Genes"=paste(unique(unlist(d$cliques$Clust1[[lev]][[cli]])),collapse = ",")
))
modID <- modID + 1
}
}
}
dft <- dft[!is.na(dft$Cell),]
return(dft)
}
load("~/Desktop/REPOSITORIES/GITHUB/FunPart/data/gda.rda")
##### NK cells #####
co <- d_nk@meta.data
fs <- fs_nk
tmp <- process_fsObj(fs)
co_pfs <- merge(co,tmp,by="Cell")
co_pfs <- co_pfs[,c(1,10,11,13,14,15)]
co_pfs <- co_pfs[!duplicated(co_pfs$Module),]
co_pfs <- co_pfs[order(co_pfs$Module),]
rm(co)
rm(tmp)
dn <- as.character(co_pfs$dataset)
dm <- as.character(unique(co_pfs$Module))
load("~/Desktop/PROJECTS/CATALOGUS_IMMUNE_MURIS_2020/RESULTS/CELLTYPESENV/NKcells_env.RData")
data_raw_NK <- list()
data_raw_NK["GSE125044_ca_d1"] <- obj_GSE125044_ca_d1@assays$RNA@data
data_raw_NK["GSE125044_ca_d2"] <- obj_GSE125044_ca_d2@assays$RNA@data
data_raw_NK["GSE125044_ca_d5"] <- obj_GSE125044_ca_d5@assays$RNA@data
data_raw_NK["GSE125044_ms_d1"] <- obj_GSE125044_ms_d1@assays$RNA@data
data_raw_NK["GSE125044_ms_d2"] <- obj_GSE125044_ms_d2@assays$RNA@data
data_raw_NK["GSE125044_ms_d4"] <- obj_GSE125044_ms_d4@assays$RNA@data
data_raw_NK["GSE125044_ms_d7"] <- obj_GSE125044_ms_d7@assays$RNA@data
data_raw_NK["GSE125044_nb_d1"] <- obj_GSE125044_nb_d1@assays$RNA@data
data_raw_NK["GSE125044_nb_d2"] <- obj_GSE125044_nb_d2@assays$RNA@data
data_raw_NK["GSE125044_nb_d4"] <- obj_GSE125044_nb_d4@assays$RNA@data
data_raw_NK["GSE125044_nb_d7"] <- obj_GSE125044_nb_d7@assays$RNA@data
data_raw_NK["GSE107947_48h"] <- obj_GSE107947_48h@assays$RNA@data
data_raw_NK["GSE107947_72h"] <- obj_GSE107947_72h@assays$RNA@data
data_raw_NK["GSE149443_lcmv_24h"] <- obj_GSE149443_lcmv_24h@assays$RNA@data
data_raw_NK["GSE149443_vsv"] <- obj_GSE149443_vsv@assays$RNA@data
data_raw_NK["GSE132394"] <- obj_GSE132394@assays$RNA@data
nk_enrich <- list()
for (i in seq(1,length(dm))) {
g <- unique(c(strsplit(co_pfs$TFs[i],split=",")[[1]],strsplit(co_pfs$Genes[i],split=",")[[1]]))
nk_enrich[[dm[i]]] <- getEnrichedBPManual(data_raw_NK[[dn[i]]],g,gda)
}
saveRDS(nk_enrich,"~/Desktop/updated.Enrichment_fs_NKcells.rds")
d_mac <- readRDS("IntegratedData/Integrated_compressed_Macrophages.rds")
d_dc <- readRDS("IntegratedData/Integrated_compressed_DCcells.rds")
d_nk <- readRDS("IntegratedData/Integrated_compressed_NKcells.rds")
d_t <- readRDS("IntegratedData/Integrated_compressed_Tcells.rds")
d_b <- readRDS("IntegratedData/Integrated_compressed_Bcells.rds")
d_mono <- readRDS("IntegratedData/Integrated_compressed_Monocytes.rds")
#Functional states details - results from FunPart
fs_mac <- readRDS("FunctionalStates/Functional_states_datasets_Macrophages.rds")
fs_dc <- readRDS("FunctionalStates/Functional_states_datasets_DCs.rds")
fs_nk <- readRDS("FunctionalStates/Functional_states_datasets_NKcells.rds")
fs_t <- readRDS("FunctionalStates/Functional_states_datasets_Tcells.rds")
fs_b <- readRDS("FunctionalStates/Functional_states_datasets_Bcells.rds")
fs_mono <- readRDS("FunctionalStates/Functional_states_datasets_Monocytes.rds")
getEnrichedBPManual <-function(dataset,setGenes,gda,adjMethod="bonferroni"){
dataset <- dataset[which(!str_detect(rownames(dataset),"^ERCC")),]
dataset <- dataset[which(!str_detect(rownames(dataset),"^mt")),]
dataset <- as.matrix(dataset)
deg <- setGenes
MB2gene=gda[, c("GOID", "Gene")]
MB2name=gda[, c("GOID", "GOterm")]
res <- enricher(deg, TERM2GENE=MB2gene, TERM2NAME=MB2name,pvalueCutoff = 0.05, pAdjustMethod = adjMethod, minGSSize = 5, maxGSSize = 2000,universe = rownames(dataset))
return(res)
}
process_fsObj <- function(fs){
modID <- 1
dft <- data.frame("Cell"=NA,"Module"=NA,"TFs"=NA,"Genes"=NA)
for (i in seq(1,length(fs))) {
#For each dataset
d <- fs[[i]]
if(length(unique(d$clust)) == 1){
#no splitting
}else{
#Get the results from FunPart algo
for (uc in seq(1,length(unique(d$clust)))) {
cn <- unique(d$clust)[uc] #Specific clust
clu <- strsplit(cn,"_")[[1]] #Get last level to know if M1 or M2
if(length(clu)>1){
lev <- paste(clu[-length(clu)],collapse = "_")
lev <- paste(lev,"1|0",sep="_")
}else{
lev <- "1|0"
}
lastel <- clu[length(clu)]
if(lastel == "1"){
#Module will be M1
module <- "M1"
cli <- "C1"
}else{
#Module will be M2
module <- "M2"
cli <- "C2"
}
#Select the right branch/module for the results
dft <- rbind(dft,data.frame(
"Cell"=names(d$clust[which(d$clust == cn)]),
"Module"=rep(paste("M",modID,sep=""),length(names(d$clust[which(d$clust == cn)]))),
"TFs"=paste(names(d$cliques$Clust1[[lev]][[cli]]),collapse = ","),
"Genes"=paste(unique(unlist(d$cliques$Clust1[[lev]][[cli]])),collapse = ",")
))
modID <- modID + 1
}
}
}
dft <- dft[!is.na(dft$Cell),]
return(dft)
}
load("~/Desktop/REPOSITORIES/GITHUB/FunPart/data/gda.rda")
##### B cells ####
co <- d_b@meta.data
fs <- fs_b
tmp <- process_fsObj(fs)
co_pfs <- merge(co,tmp,by="Cell")
co_pfs <- co_pfs[,c(1,10,11,13,14,15)]
co_pfs <- co_pfs[!duplicated(co_pfs$Module),]
co_pfs <- co_pfs[order(co_pfs$Module),]
rm(co)
rm(tmp)
dn <- as.character(co_pfs$dataset)
dm <- as.character(unique(co_pfs$Module))
load("~/Desktop/PROJECTS/CATALOGUS_IMMUNE_MURIS_2020/RESULTS/CELLTYPESENV/Bcells_env.RData")
data_raw_bcells <- list()
data_raw_bcells[["GSE125044_ca_d1"]] <- obj_GSE125044_ca_d1@assays$RNA@data
data_raw_bcells[["GSE125044_ca_d2"]] <- obj_GSE125044_ca_d2@assays$RNA@data
data_raw_bcells[["GSE125044_ca_d5"]] <- obj_GSE125044_ca_d5@assays$RNA@data
data_raw_bcells[["GSE125044_ms_d1"]] <- obj_GSE125044_ms_d1@assays$RNA@data
data_raw_bcells[["GSE125044_ms_d2"]] <- obj_GSE125044_ms_d2@assays$RNA@data
data_raw_bcells[["GSE125044_ms_d7"]] <- obj_GSE125044_ms_d7@assays$RNA@data
data_raw_bcells[["GSE13009_lcmv"]] <- obj_GSE13009_lcmv@assays$RNA@data
data_raw_bcells[["GSE13009_vsv"]] <- obj_GSE13009_vsv@assays$RNA@data
data_raw_bcells[["GSE107947_48h"]] <- obj_GSE107947_48h@assays$RNA@data
data_raw_bcells[["GSE107947_72h"]] <- obj_GSE107947_72h@assays$RNA@data
data_raw_bcells[["GSE149443_lcmv_72h"]] <- obj_GSE149443_lcmv_72h@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d1"]] <- obj_GSE125044_nb_d1@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d2"]] <- obj_GSE125044_nb_d2@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d4"]] <- obj_GSE125044_nb_d4@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d7"]] <- obj_GSE125044_nb_d7@assays$RNA@data
b_enrich <- list()
for (i in seq(1,length(dm))) {
g <- unique(c(strsplit(co_pfs$TFs[i],split=",")[[1]],strsplit(co_pfs$Genes[i],split=",")[[1]]))
b_enrich[[dm[i]]] <- getEnrichedBPManual(data_raw_bcells[[dn[i]]],g,gda)
}
unique(dn)
data_raw_bcells <- list()
data_raw_bcells[["GSE125044_ca_d1"]] <- obj_GSE125044_ca_d1@assays$RNA@data
data_raw_bcells[["GSE125044_ca_d2"]] <- obj_GSE125044_ca_d2@assays$RNA@data
data_raw_bcells[["GSE125044_ca_d5"]] <- obj_GSE125044_ca_d5@assays$RNA@data
data_raw_bcells[["GSE125044_ms_d1"]] <- obj_GSE125044_ms_d1@assays$RNA@data
data_raw_bcells[["GSE125044_ms_d2"]] <- obj_GSE125044_ms_d2@assays$RNA@data
data_raw_bcells[["GSE125044_ms_d7"]] <- obj_GSE125044_ms_d7@assays$RNA@data
data_raw_bcells[["GSE13009_lcmv_72h"]] <- obj_GSE13009_lcmv@assays$RNA@data
data_raw_bcells[["GSE13009_vsv"]] <- obj_GSE13009_vsv@assays$RNA@data
data_raw_bcells[["GSE107947_48h"]] <- obj_GSE107947_48h@assays$RNA@data
data_raw_bcells[["GSE107947_72h"]] <- obj_GSE107947_72h@assays$RNA@data
data_raw_bcells[["GSE149443_lcmv_72h"]] <- obj_GSE149443_lcmv_72h@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d1"]] <- obj_GSE125044_nb_d1@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d2"]] <- obj_GSE125044_nb_d2@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d4"]] <- obj_GSE125044_nb_d4@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d7"]] <- obj_GSE125044_nb_d7@assays$RNA@data
View(fs_b)
##### B cells ####
co <- d_b@meta.data
fs <- fs_b
tmp <- process_fsObj(fs)
View(tmp)
co_pfs <- merge(co,tmp,by="Cell")
co_pfs <- co_pfs[,c(1,10,11,13,14,15)]
View(co_pfs)
d_mac <- readRDS("IntegratedData/Integrated_compressed_Macrophages.rds")
d_dc <- readRDS("IntegratedData/Integrated_compressed_DCcells.rds")
d_nk <- readRDS("IntegratedData/Integrated_compressed_NKcells.rds")
d_t <- readRDS("IntegratedData/Integrated_compressed_Tcells.rds")
d_b <- readRDS("IntegratedData/Integrated_compressed_Bcells.rds")
d_mono <- readRDS("IntegratedData/Integrated_compressed_Monocytes.rds")
#Functional states details - results from FunPart
fs_mac <- readRDS("FunctionalStates/Functional_states_datasets_Macrophages.rds")
fs_dc <- readRDS("FunctionalStates/Functional_states_datasets_DCs.rds")
fs_nk <- readRDS("FunctionalStates/Functional_states_datasets_NKcells.rds")
fs_t <- readRDS("FunctionalStates/Functional_states_datasets_Tcells.rds")
fs_b <- readRDS("FunctionalStates/Functional_states_datasets_Bcells.rds")
fs_mono <- readRDS("FunctionalStates/Functional_states_datasets_Monocytes.rds")
getEnrichedBPManual <-function(dataset,setGenes,gda,adjMethod="bonferroni"){
dataset <- dataset[which(!str_detect(rownames(dataset),"^ERCC")),]
dataset <- dataset[which(!str_detect(rownames(dataset),"^mt")),]
dataset <- as.matrix(dataset)
deg <- setGenes
MB2gene=gda[, c("GOID", "Gene")]
MB2name=gda[, c("GOID", "GOterm")]
res <- enricher(deg, TERM2GENE=MB2gene, TERM2NAME=MB2name,pvalueCutoff = 0.05, pAdjustMethod = adjMethod, minGSSize = 5, maxGSSize = 2000,universe = rownames(dataset))
return(res)
}
process_fsObj <- function(fs){
modID <- 1
dft <- data.frame("Cell"=NA,"Module"=NA,"TFs"=NA,"Genes"=NA)
for (i in seq(1,length(fs))) {
#For each dataset
d <- fs[[i]]
if(length(unique(d$clust)) == 1){
#no splitting
}else{
#Get the results from FunPart algo
for (uc in seq(1,length(unique(d$clust)))) {
cn <- unique(d$clust)[uc] #Specific clust
clu <- strsplit(cn,"_")[[1]] #Get last level to know if M1 or M2
if(length(clu)>1){
lev <- paste(clu[-length(clu)],collapse = "_")
lev <- paste(lev,"1|0",sep="_")
}else{
lev <- "1|0"
}
lastel <- clu[length(clu)]
if(lastel == "1"){
#Module will be M1
module <- "M1"
cli <- "C1"
}else{
#Module will be M2
module <- "M2"
cli <- "C2"
}
#Select the right branch/module for the results
dft <- rbind(dft,data.frame(
"Cell"=names(d$clust[which(d$clust == cn)]),
"Module"=rep(paste("M",modID,sep=""),length(names(d$clust[which(d$clust == cn)]))),
"TFs"=paste(names(d$cliques$Clust1[[lev]][[cli]]),collapse = ","),
"Genes"=paste(unique(unlist(d$cliques$Clust1[[lev]][[cli]])),collapse = ",")
))
modID <- modID + 1
}
}
}
dft <- dft[!is.na(dft$Cell),]
return(dft)
}
load("~/Desktop/REPOSITORIES/GITHUB/FunPart/data/gda.rda")
#### T cells #####
co <- d_t@meta.data
fs <- fs_t
tmp <- process_fsObj(fs)
co_pfs <- merge(co,tmp,by="Cell")
co_pfs <- co_pfs[,c(1,10,11,13,14,15)]
co_pfs <- co_pfs[!duplicated(co_pfs$Module),]
co_pfs <- co_pfs[order(co_pfs$Module),]
rm(co)
rm(tmp)
dn <- as.character(co_pfs$dataset)
dm <- as.character(unique(co_pfs$Module))
load("~/Desktop/PROJECTS/CATALOGUS_IMMUNE_MURIS_2020/RESULTS/CELLTYPESENV/Tcells_analysis.RData")
data_raw_Tcell <- list()
data_raw_Tcell[["GSE125044_ca_d1"]] <- obj_GSE125044_ca_d1@assays$RNA@data
data_raw_Tcell[["GSE125044_ca_d2"]] <- obj_GSE125044_ca_d2@assays$RNA@data
data_raw_Tcell[["GSE125044_ca_d5"]] <- obj_GSE125044_ca_d5@assays$RNA@data
data_raw_Tcell[["GSE125044_ms_d1"]] <- obj_GSE125044_ms_d1@assays$RNA@data
data_raw_Tcell[["GSE125044_ms_d2"]] <- obj_GSE125044_ms_d2@assays$RNA@data
data_raw_Tcell[["GSE125044_ms_d7"]] <- obj_GSE125044_ms_d7@assays$RNA@data
data_raw_Tcell[["GSE125044_nb_d1"]] <- obj_GSE125044_nb_d1@assays$RNA@data
data_raw_Tcell[["GSE125044_nb_d2"]] <- obj_GSE125044_nb_d2@assays$RNA@data
data_raw_Tcell[["GSE125044_nb_d4"]] <- obj_GSE125044_nb_d4@assays$RNA@data
data_raw_Tcell[["GSE125044_nb_d7"]] <- obj_GSE125044_nb_d7@assays$RNA@data
data_raw_Tcell[["GSE13009_lcmv"]] <- obj_GSE13009_lcmv@assays$RNA@data
data_raw_Tcell[["GSE89405"]] <- obj_GSE89405@assays$RNA@data
data_raw_Tcell[["PRJEB14043"]] <- obj_PRJEB14043@assays$RNA@data
data_raw_Tcell[["GSE81197"]] <- obj_GSE81197@assays$RNA@data
data_raw_Tcell[["EMTAB4388_2d"]] <- obj_EMTAB4388_2@assays$RNA@data
data_raw_Tcell[["EMTAB4388_4d"]] <- obj_EMTAB4388_4@assays$RNA@data
data_raw_Tcell[["EMTAB4388_7d"]] <- obj_EMTAB4388_7@assays$RNA@data
data_raw_Tcell[["GSE107947_48h"]] <- obj_GSE107947_48h@assays$RNA@data
data_raw_Tcell[["GSE107947_72h"]] <- obj_GSE107947_72h@assays$RNA@data
data_raw_Tcell[["GSE149443_lcmv_24h"]] <- obj_GSE149443_lcmv_24h@assays$RNA@data
data_raw_Tcell[["GSE149443_lcmv_72h"]] <- obj_GSE149443_lcmv_72h@assays$RNA@data
data_raw_Tcell[["GSE149443_vsv"]] <- obj_GSE149443_vsv@assays$RNA@data
data_raw_Tcell[["GSE103753"]] <- obj_GSE103753@assays$RNA@data
data_raw_Tcell[["GSE134157"]] <- obj_GSE134157@assays$RNA@data
data_raw_Tcell[["GSE146626_liver"]] <- obj_GSE146626_liver@assays$RNA@data
data_raw_Tcell[["GSE146626_ln_d9"]] <- obj_GSE146626_ln_d9@assays$RNA@data
data_raw_Tcell[["GSE146626_ln_d14"]] <- obj_GSE146626_ln_d14@assays$RNA@data
data_raw_Tcell[["GSE146626_ln_d30"]] <- obj_GSE146626_ln_d30@assays$RNA@data
data_raw_Tcell[["EMTAB3857_14d"]] <- obj_EMTAB3857_14d@assays$RNA@data
data_raw_Tcell[["EMTAB3857_49d"]] <- obj_EMTAB3857_49d@assays$RNA@data
t_enrich <- list()
for (i in seq(1,length(dm))) {
g <- unique(c(strsplit(co_pfs$TFs[i],split=",")[[1]],strsplit(co_pfs$Genes[i],split=",")[[1]]))
t_enrich[[dm[i]]] <- getEnrichedBPManual(data_raw_Tcell[[dn[i]]],g,gda)
}
unique(dn)
data_raw_Tcell <- list()
data_raw_Tcell[["GSE125044_ca_d1"]] <- obj_GSE125044_ca_d1@assays$RNA@data
data_raw_Tcell[["GSE125044_ca_d2"]] <- obj_GSE125044_ca_d2@assays$RNA@data
data_raw_Tcell[["GSE125044_ca_d5"]] <- obj_GSE125044_ca_d5@assays$RNA@data
data_raw_Tcell[["GSE125044_ms_d1"]] <- obj_GSE125044_ms_d1@assays$RNA@data
data_raw_Tcell[["GSE125044_ms_d2"]] <- obj_GSE125044_ms_d2@assays$RNA@data
data_raw_Tcell[["GSE125044_ms_d7"]] <- obj_GSE125044_ms_d7@assays$RNA@data
data_raw_Tcell[["GSE125044_nb_d1"]] <- obj_GSE125044_nb_d1@assays$RNA@data
data_raw_Tcell[["GSE125044_nb_d2"]] <- obj_GSE125044_nb_d2@assays$RNA@data
data_raw_Tcell[["GSE125044_nb_d4"]] <- obj_GSE125044_nb_d4@assays$RNA@data
data_raw_Tcell[["GSE125044_nb_d7"]] <- obj_GSE125044_nb_d7@assays$RNA@data
data_raw_Tcell[["GSE13009_lcmv"]] <- obj_GSE13009_lcmv@assays$RNA@data
data_raw_Tcell[["GSE89405"]] <- obj_GSE89405@assays$RNA@data
data_raw_Tcell[["PRJEB14043"]] <- obj_PRJEB14043@assays$RNA@data
data_raw_Tcell[["GSE81197"]] <- obj_GSE81197@assays$RNA@data
data_raw_Tcell[["EMTAB4388_2d"]] <- obj_EMTAB4388_2@assays$RNA@data
data_raw_Tcell[["EMTAB4388_4d"]] <- obj_EMTAB4388_4@assays$RNA@data
data_raw_Tcell[["EMTAB4388_7d"]] <- obj_EMTAB4388_7@assays$RNA@data
data_raw_Tcell[["GSE107947_48h"]] <- obj_GSE107947_48h@assays$RNA@data
data_raw_Tcell[["GSE107947_72h"]] <- obj_GSE107947_72h@assays$RNA@data
data_raw_Tcell[["GSE149443_lcmv_24h"]] <- obj_GSE149443_lcmv_24h@assays$RNA@data
data_raw_Tcell[["GSE149443_lcmv_72h"]] <- obj_GSE149443_lcmv_72h@assays$RNA@data
data_raw_Tcell[["GSE149443_vsv"]] <- obj_GSE149443_vsv@assays$RNA@data
data_raw_Tcell[["GSE103753"]] <- obj_GSE103753@assays$RNA@data
data_raw_Tcell[["GSE134157"]] <- obj_GSE134157@assays$RNA@data
data_raw_Tcell[["GSE146626"]] <- obj_GSE146626_liver@assays$RNA@data
data_raw_Tcell[["GSE146626_ln_d9"]] <- obj_GSE146626_ln_d9@assays$RNA@data
data_raw_Tcell[["GSE146626_ln_d14"]] <- obj_GSE146626_ln_d14@assays$RNA@data
data_raw_Tcell[["GSE146626_ln_d30"]] <- obj_GSE146626_ln_d30@assays$RNA@data
data_raw_Tcell[["EMTAB3857_14d"]] <- obj_EMTAB3857_14d@assays$RNA@data
data_raw_Tcell[["EMTAB3857_49d"]] <- obj_EMTAB3857_49d@assays$RNA@data
t_enrich <- list()
for (i in seq(1,length(dm))) {
g <- unique(c(strsplit(co_pfs$TFs[i],split=",")[[1]],strsplit(co_pfs$Genes[i],split=",")[[1]]))
t_enrich[[dm[i]]] <- getEnrichedBPManual(data_raw_Tcell[[dn[i]]],g,gda)
}
saveRDS(t_enrich,"~/Desktop/updated.Enrichment_fs_Tcells.rds")
d_mac <- readRDS("IntegratedData/Integrated_compressed_Macrophages.rds")
d_dc <- readRDS("IntegratedData/Integrated_compressed_DCcells.rds")
d_nk <- readRDS("IntegratedData/Integrated_compressed_NKcells.rds")
d_t <- readRDS("IntegratedData/Integrated_compressed_Tcells.rds")
d_b <- readRDS("IntegratedData/Integrated_compressed_Bcells.rds")
d_mono <- readRDS("IntegratedData/Integrated_compressed_Monocytes.rds")
#Functional states details - results from FunPart
fs_mac <- readRDS("FunctionalStates/Functional_states_datasets_Macrophages.rds")
fs_dc <- readRDS("FunctionalStates/Functional_states_datasets_DCs.rds")
fs_nk <- readRDS("FunctionalStates/Functional_states_datasets_NKcells.rds")
fs_t <- readRDS("FunctionalStates/Functional_states_datasets_Tcells.rds")
fs_b <- readRDS("FunctionalStates/Functional_states_datasets_Bcells.rds")
fs_mono <- readRDS("FunctionalStates/Functional_states_datasets_Monocytes.rds")
getEnrichedBPManual <-function(dataset,setGenes,gda,adjMethod="bonferroni"){
dataset <- dataset[which(!str_detect(rownames(dataset),"^ERCC")),]
dataset <- dataset[which(!str_detect(rownames(dataset),"^mt")),]
dataset <- as.matrix(dataset)
deg <- setGenes
MB2gene=gda[, c("GOID", "Gene")]
MB2name=gda[, c("GOID", "GOterm")]
res <- enricher(deg, TERM2GENE=MB2gene, TERM2NAME=MB2name,pvalueCutoff = 0.05, pAdjustMethod = adjMethod, minGSSize = 5, maxGSSize = 2000,universe = rownames(dataset))
return(res)
}
process_fsObj <- function(fs){
modID <- 1
dft <- data.frame("Cell"=NA,"Module"=NA,"TFs"=NA,"Genes"=NA)
for (i in seq(1,length(fs))) {
#For each dataset
d <- fs[[i]]
if(length(unique(d$clust)) == 1){
#no splitting
}else{
#Get the results from FunPart algo
for (uc in seq(1,length(unique(d$clust)))) {
cn <- unique(d$clust)[uc] #Specific clust
clu <- strsplit(cn,"_")[[1]] #Get last level to know if M1 or M2
if(length(clu)>1){
lev <- paste(clu[-length(clu)],collapse = "_")
lev <- paste(lev,"1|0",sep="_")
}else{
lev <- "1|0"
}
lastel <- clu[length(clu)]
if(lastel == "1"){
#Module will be M1
module <- "M1"
cli <- "C1"
}else{
#Module will be M2
module <- "M2"
cli <- "C2"
}
#Select the right branch/module for the results
dft <- rbind(dft,data.frame(
"Cell"=names(d$clust[which(d$clust == cn)]),
"Module"=rep(paste("M",modID,sep=""),length(names(d$clust[which(d$clust == cn)]))),
"TFs"=paste(names(d$cliques$Clust1[[lev]][[cli]]),collapse = ","),
"Genes"=paste(unique(unlist(d$cliques$Clust1[[lev]][[cli]])),collapse = ",")
))
modID <- modID + 1
}
}
}
dft <- dft[!is.na(dft$Cell),]
return(dft)
}
load("~/Desktop/REPOSITORIES/GITHUB/FunPart/data/gda.rda")
View(d_b@meta.data)
d_b_meta <- d_b@meta.data
d_b_meta$dataset[which(d_b_meta$dataset == "GSE13009_lcmv_72h")] <- "GSE149443_lcmv_72h"
d_b_meta <- d_b@meta.data
d_b_meta$dataset <- as.character(d_b_meta$dataset)
d_b_meta$dataset[which(d_b_meta$dataset == "GSE13009_lcmv_72h")] <- "GSE149443_lcmv_72h"
d_b@meta.data <- d_b_meta
saveRDS("~/Desktop/metaupdated.Integrated_compressed_Bcells.rds")
saveRDS(d_b,"~/Desktop/metaupdated.Integrated_compressed_Bcells.rds")
##### B cells #### BUG DATASET
co <- d_b@meta.data
fs <- fs_b
tmp <- process_fsObj(fs)
co_pfs <- merge(co,tmp,by="Cell")
co_pfs <- co_pfs[,c(1,10,11,13,14,15)]
co_pfs <- co_pfs[!duplicated(co_pfs$Module),]
co_pfs <- co_pfs[order(co_pfs$Module),]
rm(co)
rm(tmp)
dn <- as.character(co_pfs$dataset)
dm <- as.character(unique(co_pfs$Module))
load("~/Desktop/PROJECTS/CATALOGUS_IMMUNE_MURIS_2020/RESULTS/CELLTYPESENV/Bcells_env.RData")
data_raw_bcells <- list()
data_raw_bcells[["GSE125044_ca_d1"]] <- obj_GSE125044_ca_d1@assays$RNA@data
data_raw_bcells[["GSE125044_ca_d2"]] <- obj_GSE125044_ca_d2@assays$RNA@data
data_raw_bcells[["GSE125044_ca_d5"]] <- obj_GSE125044_ca_d5@assays$RNA@data
data_raw_bcells[["GSE125044_ms_d1"]] <- obj_GSE125044_ms_d1@assays$RNA@data
data_raw_bcells[["GSE125044_ms_d2"]] <- obj_GSE125044_ms_d2@assays$RNA@data
data_raw_bcells[["GSE125044_ms_d7"]] <- obj_GSE125044_ms_d7@assays$RNA@data
data_raw_bcells[["GSE13009_lcmv"]] <- obj_GSE13009_lcmv@assays$RNA@data
data_raw_bcells[["GSE13009_vsv"]] <- obj_GSE13009_vsv@assays$RNA@data
data_raw_bcells[["GSE107947_48h"]] <- obj_GSE107947_48h@assays$RNA@data
data_raw_bcells[["GSE107947_72h"]] <- obj_GSE107947_72h@assays$RNA@data
data_raw_bcells[["GSE149443_lcmv_72h"]] <- obj_GSE149443_lcmv_72h@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d1"]] <- obj_GSE125044_nb_d1@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d2"]] <- obj_GSE125044_nb_d2@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d4"]] <- obj_GSE125044_nb_d4@assays$RNA@data
data_raw_bcells[["GSE125044_nb_d7"]] <- obj_GSE125044_nb_d7@assays$RNA@data
b_enrich <- list()
for (i in seq(1,length(dm))) {
g <- unique(c(strsplit(co_pfs$TFs[i],split=",")[[1]],strsplit(co_pfs$Genes[i],split=",")[[1]]))
b_enrich[[dm[i]]] <- getEnrichedBPManual(data_raw_bcells[[dn[i]]],g,gda)
}
saveRDS(b_enrich,"~/Desktop/Enrichment_fs_Bcells.rds")
setwd("~/Desktop/REPOSITORIES/GITLAB/immunofunmap")
library(shiny)
runApp("app.R")
help(FeaturePlot)
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
runApp("app.R")
help(FeaturePlot)
help(DefaultAssay)
runApp("app.R")
runApp("app.R")
help(NormalizeData)
runApp("app.R")
runApp("app.R")
setwd("~/Desktop/REPOSITORIES/GITHUB/FunPart")
library(roxygen2)
roxygen2::roxygenise()
Functional_states_datasets_Macrophages <- readRDS("~/Desktop/REPOSITORIES/GITLAB/immunofunmap/FunctionalStates/Functional_states_datasets_Macrophages.rds")
View(Functional_states_datasets_Macrophages)
